function notNil(x) {
    return x != null;
}
function pick(obj, ...keys) {
    if (Object.keys(obj).length === 0) {
        return obj;
    }
    const res = {};
    for (const key of keys) {
        if (key in obj) {
            res[key] = obj[key];
        }
    }
    return res;
}
function omit(obj, ...keys) {
    if (Object.keys(obj).length === 0) {
        return obj;
    }
    const res = {};
    for (const key of Object.keys(obj)) {
        if (!keys.includes(key)) {
            res[key] = obj[key];
        }
    }
    return res;
}
function isSubset(a1, a2) {
    return a1.every((x) => a2.includes(x));
}
function chainSingleArgFuncs(...funcs) {
    if (funcs.length === 0) {
        return undefined;
    }
    return (arg) => {
        let res = arg;
        for (const func of funcs) {
            res = func(res);
        }
        return res;
    };
}
function isString(x) {
    return typeof x === "string";
}
function groupBy(collection, keyFunc) {
    const result = {};
    for (const obj of collection) {
        const key = keyFunc(obj);
        if (key in result) {
            result[key].push(obj);
        }
        else {
            result[key] = [obj];
        }
    }
    return result;
}
function mapValues(obj, mapper) {
    const result = {};
    for (const key in obj) {
        result[key] = mapper(obj[key]);
    }
    return result;
}

export { isString as a, chainSingleArgFuncs as c, groupBy as g, isSubset as i, mapValues as m, notNil as n, omit as o, pick as p };
//# sourceMappingURL=common-98719219.js.map
