function notNil(x) {
    return x != null;
}
function pick(obj) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    if (Object.keys(obj).length === 0) {
        return obj;
    }
    var res = {};
    for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
        var key = keys_1[_a];
        if (key in obj) {
            res[key] = obj[key];
        }
    }
    return res;
}
function omit(obj) {
    var keys = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        keys[_i - 1] = arguments[_i];
    }
    if (Object.keys(obj).length === 0) {
        return obj;
    }
    var res = {};
    for (var _a = 0, _b = Object.keys(obj); _a < _b.length; _a++) {
        var key = _b[_a];
        if (!keys.includes(key)) {
            res[key] = obj[key];
        }
    }
    return res;
}
function isSubset(a1, a2) {
    return a1.every(function (x) { return a2.includes(x); });
}
function chainSingleArgFuncs() {
    var funcs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        funcs[_i] = arguments[_i];
    }
    if (funcs.length === 0) {
        return undefined;
    }
    return function (arg) {
        var res = arg;
        for (var _i = 0, funcs_1 = funcs; _i < funcs_1.length; _i++) {
            var func = funcs_1[_i];
            res = func(res);
        }
        return res;
    };
}
function isString(x) {
    return typeof x === "string";
}
function groupBy(collection, keyFunc) {
    var result = {};
    for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
        var obj = collection_1[_i];
        var key = keyFunc(obj);
        if (key in result) {
            result[key].push(obj);
        }
        else {
            result[key] = [obj];
        }
    }
    return result;
}
function mapValues(obj, mapper) {
    var result = {};
    for (var key in obj) {
        result[key] = mapper(obj[key]);
    }
    return result;
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

export { __rest as _, __assign as a, __spreadArray as b, chainSingleArgFuncs as c, isString as d, groupBy as g, isSubset as i, mapValues as m, notNil as n, omit as o, pick as p };
//# sourceMappingURL=tslib.es6-d26ffe68.js.map
