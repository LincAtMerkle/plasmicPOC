// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: Pyz-ejhh9PT-70
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: gqYGTpy-VKih-k/component

import { useScreenVariants as useScreenVariantssqj7Gi5LUgTnD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SQJ7GI5lUG-TnD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicSubNav.module.css"; // plasmic-import: Pyz-ejhh9PT-70/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CHjFDXi0wrulJy/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: N2O1cciiO0c85w/icon

export type PlasmicSubNav__VariantMembers = {};
export type PlasmicSubNav__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubNav__VariantsArgs;
export const PlasmicSubNav__VariantProps = new Array<VariantPropType>();

export type PlasmicSubNav__ArgsType = {};
type ArgPropType = keyof PlasmicSubNav__ArgsType;
export const PlasmicSubNav__ArgProps = new Array<ArgPropType>();

export type PlasmicSubNav__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultSubNavProps {
  className?: string;
}

function PlasmicSubNav__RenderFunc(props: {
  variants: PlasmicSubNav__VariantsArgs;
  args: PlasmicSubNav__ArgsType;
  overrides: PlasmicSubNav__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqj7Gi5LUgTnD()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <Button2
        className={classNames("__wab_instance", sty.button2__deVlp)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg___4B8Vc)}
            role={"img"}
          />
        }
        link={`/component-2`}
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__jExGg)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___2FIvX
          )}
        >
          {"Foundations"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__yz6GF)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__kptsO)}
            role={"img"}
          />
        }
        link={`/component-2`}
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__lyP6S)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___4QVFj
          )}
        >
          {"Button"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__lOmj1)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__pmI)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__jiJsz)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__feDc
          )}
        >
          {"Button Group"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__mMezX)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg___1TPmT)}
            role={"img"}
          />
        }
        link={`/new-page-3`}
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg___9Jnyk)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__w8KAs
          )}
        >
          {"Image"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2___0CMtx)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg___2TkHs)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__qC1X)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0TqeK
          )}
        >
          {"Icon"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__rtJcr)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__lLWiF)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__pkFb)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___52Kx
          )}
        >
          {"Text"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__nbSuD)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__zicvX)}
            role={"img"}
          />
        }
        link={`/component-3`}
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__oyPwI)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__evPil
          )}
        >
          {"Header"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__kbodp)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__sf0BN)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__jo7L3)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__myKe4
          )}
        >
          {"Highlighter"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__waaUc)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__wrFuH)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__jJXtB)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__r5Hz0
          )}
        >
          {"Box"}
        </div>
      </Button2>

      <Button2
        className={classNames("__wab_instance", sty.button2__hWUe)}
        color={"clear" as const}
        endIcon={
          <Icon38Icon
            className={classNames(projectcss.all, sty.svg__pt26T)}
            role={"img"}
          />
        }
        startIcon={
          <ChecksvgIcon
            className={classNames(projectcss.all, sty.svg__vwu3A)}
            role={"img"}
          />
        }
      >
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__dizpF
          )}
        >
          {"Card"}
        </div>
      </Button2>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubNav__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubNav__VariantsArgs;
    args?: PlasmicSubNav__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubNav__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSubNav__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSubNav__ArgProps,
          internalVariantPropNames: PlasmicSubNav__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSubNav__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubNav";
  } else {
    func.displayName = `PlasmicSubNav.${nodeName}`;
  }
  return func;
}

export const PlasmicSubNav = Object.assign(
  // Top-level PlasmicSubNav renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicSubNav
    internalVariantProps: PlasmicSubNav__VariantProps,
    internalArgProps: PlasmicSubNav__ArgProps
  }
);

export default PlasmicSubNav;
/* prettier-ignore-end */
