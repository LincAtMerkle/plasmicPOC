// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: _eu-35VrnzeFW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ChakraDocs } from "../../../styles/ChakraDocs"; // plasmic-import: wtErYCFh5X4hT/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicDesignTokens.module.css"; // plasmic-import: _eu-35VrnzeFW/css

export type PlasmicDesignTokens__VariantMembers = {};
export type PlasmicDesignTokens__VariantsArgs = {};
type VariantPropType = keyof PlasmicDesignTokens__VariantsArgs;
export const PlasmicDesignTokens__VariantProps = new Array<VariantPropType>();

export type PlasmicDesignTokens__ArgsType = {};
type ArgPropType = keyof PlasmicDesignTokens__ArgsType;
export const PlasmicDesignTokens__ArgProps = new Array<ArgPropType>();

export type PlasmicDesignTokens__OverridesType = {
  root?: p.Flex<"div">;
  chakraDocs?: p.Flex<typeof ChakraDocs>;
};

export interface DefaultDesignTokensProps {}

function PlasmicDesignTokens__RenderFunc(props: {
  variants: PlasmicDesignTokens__VariantsArgs;
  args: PlasmicDesignTokens__ArgsType;
  overrides: PlasmicDesignTokens__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <ChakraDocs
            data-plasmic-name={"chakraDocs"}
            data-plasmic-override={overrides.chakraDocs}
            className={classNames("__wab_instance", sty.chakraDocs)}
            set={"comp/button" as const}
            theme={"light" as const}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "chakraDocs"],
  chakraDocs: ["chakraDocs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  chakraDocs: typeof ChakraDocs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDesignTokens__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDesignTokens__VariantsArgs;
    args?: PlasmicDesignTokens__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDesignTokens__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDesignTokens__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDesignTokens__ArgProps,
          internalVariantPropNames: PlasmicDesignTokens__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDesignTokens__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDesignTokens";
  } else {
    func.displayName = `PlasmicDesignTokens.${nodeName}`;
  }
  return func;
}

export const PlasmicDesignTokens = Object.assign(
  // Top-level PlasmicDesignTokens renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    chakraDocs: makeNodeComponent("chakraDocs"),

    // Metadata about props expected for PlasmicDesignTokens
    internalVariantProps: PlasmicDesignTokens__VariantProps,
    internalArgProps: PlasmicDesignTokens__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDesignTokens;
/* prettier-ignore-end */
