// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: Pvo7pQ-dONVk1i
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: 29bXtXSfKv4wef/component
import SubNav from "../../SubNav"; // plasmic-import: Pyz-ejhh9PT-70/component
import Button2 from "../../Button2"; // plasmic-import: gqYGTpy-VKih-k/component
import { Heading } from "@chakra-ui/react"; // plasmic-import: LUZ-EadiFt-pKZ/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: v15y1zx5wjOie1/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: jM-c9S8dG8S0c4/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: FXQF_HUkAEK9Dn/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: _ZE645AF17I4h0/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: AB2xSLDEjMl_Kp/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: r6nlMZjR1r4zub/codeComponent
import { Card } from "@chakra-ui/react"; // plasmic-import: 6Qbj5xTSyl--Ne/codeComponent
import { CardHeader } from "@chakra-ui/react"; // plasmic-import: a_rvdGNgjJ/codeComponent
import { ImageWithOverlay } from "../../../styles/ImageWithOverlay"; // plasmic-import: tROMOisFE8/codeComponent
import { CardBody } from "@chakra-ui/react"; // plasmic-import: fFkeOKX7Ep/codeComponent
import { Tag } from "@chakra-ui/react"; // plasmic-import: ea401-yg67/codeComponent
import { TagLabel } from "@chakra-ui/react"; // plasmic-import: fleFMCeN1e/codeComponent
import { IconButton } from "@chakra-ui/react"; // plasmic-import: C9C4SKKV_q/codeComponent
import { CheckCircleIcon } from "@chakra-ui/react"; // plasmic-import: GSuP1QQXRL2iP/codeComponent
import { Avatar } from "@chakra-ui/react"; // plasmic-import: svHVam3f06ie2b/codeComponent
import { CardFooter } from "@chakra-ui/react"; // plasmic-import: eR-nk9aL9r/codeComponent
import { AvatarGroup } from "@chakra-ui/react"; // plasmic-import: KNrHKGUA3YZjG3/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: 1zjFflbhvmK0o/codeComponent
import { CardCustom } from "../../../styles/CardCustom"; // plasmic-import: sWvaMs0net/codeComponent
import { CardCustomContent } from "../../../styles/CardCustomContent"; // plasmic-import: LVGuXO51uB/codeComponent
import { CardCustomSubContent } from "../../../styles/CardCustomSubContent"; // plasmic-import: ujFSR7JwYm/codeComponent
import { ButtonPreview } from "../../../styles/ButtonPreview"; // plasmic-import: PcwhN-FHyr0-AH/codeComponent
import { ChakraDocs } from "../../../styles/ChakraDocs"; // plasmic-import: wtErYCFh5X4hT/codeComponent

import { useScreenVariants as useScreenVariantssqj7Gi5LUgTnD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SQJ7GI5lUG-TnD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicCard.module.css"; // plasmic-import: Pvo7pQ-dONVk1i/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CHjFDXi0wrulJy/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: N2O1cciiO0c85w/icon

export type PlasmicCard__VariantMembers = {
  props: "props";
  theming: "theming";
};
export type PlasmicCard__VariantsArgs = {
  props?: SingleBooleanChoiceArg<"props">;
  theming?: SingleBooleanChoiceArg<"theming">;
};
type VariantPropType = keyof PlasmicCard__VariantsArgs;
export const PlasmicCard__VariantProps = new Array<VariantPropType>(
  "props",
  "theming"
);

export type PlasmicCard__ArgsType = {};
type ArgPropType = keyof PlasmicCard__ArgsType;
export const PlasmicCard__ArgProps = new Array<ArgPropType>();

export type PlasmicCard__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<typeof Nav>;
  subNav?: p.Flex<typeof SubNav>;
  button2?: p.Flex<typeof Button2>;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
  image?: p.Flex<"div">;
  stack?: p.Flex<"div">;
  stack2?: p.Flex<"div">;
  header?: p.Flex<"div">;
  cardHeader?: p.Flex<typeof CardHeader>;
  cardBody?: p.Flex<typeof CardBody>;
  iconButton?: p.Flex<typeof IconButton>;
  cardFooter?: p.Flex<typeof CardFooter>;
  avatarGroup?: p.Flex<typeof AvatarGroup>;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
  chakraDocs?: p.Flex<typeof ChakraDocs>;
};

export interface DefaultCardProps {}

function PlasmicCard__RenderFunc(props: {
  variants: PlasmicCard__VariantsArgs;
  args: PlasmicCard__ArgsType;
  overrides: PlasmicCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "props",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.props
      },
      {
        path: "theming",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.theming
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqj7Gi5LUgTnD()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootprops]: hasVariant($state, "props", "props"),
              [sty.roottheming]: hasVariant($state, "theming", "theming")
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vcb5L)}
          >
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames("__wab_instance", sty.nav)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ptNg0, {
                [sty.freeBoxprops__ptNg0A6X62]: hasVariant(
                  $state,
                  "props",
                  "props"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0VLz5)}
              >
                <SubNav
                  data-plasmic-name={"subNav"}
                  data-plasmic-override={overrides.subNav}
                  className={classNames("__wab_instance", sty.subNav)}
                />

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__q5GTh)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button___4FNk2
                      )}
                    >
                      {"Sign up"}
                    </button>

                    {true ? (
                      <Button2
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__b74Y8
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vEaXs
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ydUKi
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button2>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__k1XUz)}
                >
                  <Heading
                    className={classNames("__wab_instance", sty.heading__c9H2)}
                    noOfLines={1 as const}
                    size={"xl" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___97FxA
                      )}
                    >
                      {"Card"}
                    </div>
                  </Heading>

                  <Text
                    align={"left" as const}
                    casing={"capitalise" as const}
                    className={classNames("__wab_instance", sty.text__jt7I8, {
                      [sty.textprops__jt7I8A6X62]: hasVariant(
                        $state,
                        "props",
                        "props"
                      )
                    })}
                    decoration={"none" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5ZcdC,
                        {
                          [sty.textprops___5ZcdCa6X62]: hasVariant(
                            $state,
                            "props",
                            "props"
                          ),
                          [sty.texttheming___5ZcdC69JlO]: hasVariant(
                            $state,
                            "theming",
                            "theming"
                          )
                        }
                      )}
                    >
                      {
                        "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation."
                      }
                    </div>
                  </Text>

                  <Tabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    className={classNames("__wab_instance", sty.tabs, {
                      [sty.tabsprops]: hasVariant($state, "props", "props"),
                      [sty.tabstheming]: hasVariant(
                        $state,
                        "theming",
                        "theming"
                      )
                    })}
                    variant={"soft-rounded" as const}
                  >
                    <TabList
                      data-plasmic-name={"tabList"}
                      data-plasmic-override={overrides.tabList}
                      className={classNames("__wab_instance", sty.tabList, {
                        [sty.tabListprops]: hasVariant(
                          $state,
                          "props",
                          "props"
                        ),
                        [sty.tabListtheming]: hasVariant(
                          $state,
                          "theming",
                          "theming"
                        )
                      })}
                    >
                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__gia0E,
                          {
                            [sty.tabtheming__gia0E69JlO]: hasVariant(
                              $state,
                              "theming",
                              "theming"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aJprH
                          )}
                        >
                          {"Usage"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames("__wab_instance", sty.tab__uOxT7)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__psogO
                          )}
                        >
                          {"Props"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames("__wab_instance", sty.tab__rT721)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x0N7F
                          )}
                        >
                          {"Figma"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames("__wab_instance", sty.tab__wj7IG)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mtei
                          )}
                        >
                          {"Dev"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___6LBn,
                          {
                            [sty.tabprops___6LBNa6X62]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__swULu
                          )}
                        >
                          {"Theming"}
                        </div>
                      </Tab>
                    </TabList>

                    <TabPanels
                      data-plasmic-name={"tabPanels"}
                      data-plasmic-override={overrides.tabPanels}
                      className={classNames("__wab_instance", sty.tabPanels)}
                    >
                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__hlXj9
                        )}
                      >
                        <Heading
                          className={classNames(
                            "__wab_instance",
                            sty.heading__d5LKo
                          )}
                          noOfLines={2 as const}
                          size={"lg" as const}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__thg9H
                            )}
                          >
                            {
                              "A Chakra UI Pro Card example used as a template, with simple text props:"
                            }
                          </div>
                        </Heading>

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___3DP1Z
                          )}
                        >
                          <div
                            data-plasmic-name={"image"}
                            data-plasmic-override={overrides.image}
                            className={classNames(projectcss.all, sty.image)}
                          />

                          <p.Stack
                            as={"div"}
                            data-plasmic-name={"stack"}
                            data-plasmic-override={overrides.stack}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.stack)}
                          >
                            <div
                              data-plasmic-name={"stack2"}
                              data-plasmic-override={overrides.stack2}
                              className={classNames(projectcss.all, sty.stack2)}
                            >
                              <div
                                data-plasmic-name={"header"}
                                data-plasmic-override={overrides.header}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.header
                                )}
                              >
                                {"we do Parties and Functions"}
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__somVr
                                )}
                              >
                                {
                                  "Get ready for the craziest round of mini golf you've ever played! Wind your way through a tantalising labyrinth inspired by your everyday everythings with a generous slathering of nostalgia."
                                }
                              </div>
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__nZJt
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___5S9H6
                                )}
                              >
                                {"Book online"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6990
                          )}
                        >
                          <Card
                            className={classNames(
                              "__wab_instance",
                              sty.card__isl1
                            )}
                            variant={"primary" as const}
                          >
                            <CardHeader
                              data-plasmic-name={"cardHeader"}
                              data-plasmic-override={overrides.cardHeader}
                              className={classNames(
                                "__wab_instance",
                                sty.cardHeader
                              )}
                            >
                              <ImageWithOverlay
                                className={classNames(
                                  "__wab_instance",
                                  sty.imageWithOverlay__ci8Mv
                                )}
                              >
                                <Heading
                                  className={classNames(
                                    "__wab_instance",
                                    sty.heading__vxZMj
                                  )}
                                  noOfLines={1 as const}
                                  size={"4xl" as const}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uo4Yd
                                    )}
                                  >
                                    {"Heading"}
                                  </div>
                                </Heading>
                              </ImageWithOverlay>
                            </CardHeader>

                            <CardBody
                              data-plasmic-name={"cardBody"}
                              data-plasmic-override={overrides.cardBody}
                              className={classNames(
                                "__wab_instance",
                                sty.cardBody
                              )}
                            >
                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag__dA6HZ
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel__lcvL
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__il3Hx
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag___59XMx
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel__fiYZt
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__l7Tqy
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag__slUC
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel__tAY
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__kqazR
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag__nWzr
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel__jbr
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__twvlu
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag__kvadX
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel__avZo2
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qUcQh
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Tag
                                borderRadius={"full" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.tag___9IA
                                )}
                                variant={"subtle" as const}
                              >
                                <TagLabel
                                  className={classNames(
                                    "__wab_instance",
                                    sty.tagLabel___1GlvB
                                  )}
                                >
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__qvQId
                                    )}
                                  >
                                    {"tag"}
                                  </div>
                                </TagLabel>
                              </Tag>

                              <Text
                                align={"left" as const}
                                casing={"capitalise" as const}
                                className={classNames(
                                  "__wab_instance",
                                  sty.text__lPEam
                                )}
                                decoration={"none" as const}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__yk0Ks
                                  )}
                                >
                                  {
                                    "Century City Walk, 285 Springvale Road, Glen Waverley, Victoria, 3150"
                                  }
                                </div>
                              </Text>
                            </CardBody>

                            <IconButton
                              data-plasmic-name={"iconButton"}
                              data-plasmic-override={overrides.iconButton}
                              className={classNames(
                                "__wab_instance",
                                sty.iconButton
                              )}
                              colorScheme={"red" as const}
                              icon={
                                <CheckCircleIcon
                                  className={classNames(
                                    "__wab_instance",
                                    sty.checkCircleIcon__xSjqf
                                  )}
                                />
                              }
                              isRound={true}
                              size={"lg" as const}
                              variant={"solid" as const}
                            />

                            <Avatar
                              bg={"red.500" as const}
                              className={classNames(
                                "__wab_instance",
                                sty.avatar__l472H
                              )}
                              name={"" as const}
                              src={"" as const}
                            />

                            <CardFooter
                              data-plasmic-name={"cardFooter"}
                              data-plasmic-override={overrides.cardFooter}
                              className={classNames(
                                "__wab_instance",
                                sty.cardFooter
                              )}
                            >
                              {true ? (
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    sty.freeBox__cb1Cm
                                  )}
                                >
                                  <AvatarGroup
                                    data-plasmic-name={"avatarGroup"}
                                    data-plasmic-override={
                                      overrides.avatarGroup
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.avatarGroup
                                    )}
                                    spacing={"-0.75rem" as const}
                                  >
                                    <Avatar
                                      bg={"red.500" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.avatar__tKepA
                                      )}
                                      name={"" as const}
                                      showBorder={false}
                                      src={"" as const}
                                    />

                                    <Avatar
                                      bg={"red.500" as const}
                                      className={classNames(
                                        "__wab_instance",
                                        sty.avatar__ef3Lx
                                      )}
                                      name={"Dan Abrahmov" as const}
                                      src={
                                        "https://bit.ly/dan-abramov" as const
                                      }
                                    />
                                  </AvatarGroup>

                                  <Button
                                    className={classNames(
                                      "__wab_instance",
                                      sty.button__x2R3
                                    )}
                                    leftIcon={
                                      <CheckCircleIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkCircleIcon__ihdAh
                                        )}
                                      />
                                    }
                                    rightIcon={
                                      <CheckCircleIcon
                                        className={classNames(
                                          "__wab_instance",
                                          sty.checkCircleIcon__mshVx
                                        )}
                                      />
                                    }
                                    variant={"primary" as const}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__ovVvo
                                      )}
                                    >
                                      {"Button"}
                                    </div>
                                  </Button>
                                </div>
                              ) : null}
                            </CardFooter>
                          </Card>
                        </p.Stack>

                        {true ? (
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xlICy
                            )}
                          >
                            <Heading
                              className={classNames(
                                "__wab_instance",
                                sty.heading__xq0M
                              )}
                              noOfLines={1 as const}
                              size={"lg" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___1Qs6P
                                )}
                              >
                                {"Figma Copy/paste:"}
                              </div>
                            </Heading>

                            <Heading
                              className={classNames(
                                "__wab_instance",
                                sty.heading__utf0X
                              )}
                              noOfLines={1 as const}
                              size={"lg" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eMllF
                                )}
                              >
                                {"One React component:"}
                              </div>
                            </Heading>

                            <CardCustom
                              className={classNames(
                                "__wab_instance",
                                sty.cardCustom__cDj9P
                              )}
                            >
                              <CardCustomContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.cardCustomContent___7WrhB
                                )}
                              >
                                <CardCustomSubContent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cardCustomSubContent__eCyW
                                  )}
                                  description={
                                    "Get ready for the craziest round of mini golf you've ever played! Wind your way through a tantalising labyrinth inspired by your everyday everythings with a generous slathering of nostalgia." as const
                                  }
                                  title={"We do Parties and Functions" as const}
                                />
                              </CardCustomContent>
                            </CardCustom>

                            <Heading
                              className={classNames(
                                "__wab_instance",
                                sty.heading__qdvBo
                              )}
                              noOfLines={1 as const}
                              size={"lg" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__bcvsq
                                )}
                              >
                                {"There React components: "}
                              </div>
                            </Heading>

                            <CardCustom
                              className={classNames(
                                "__wab_instance",
                                sty.cardCustom__k6Mu0
                              )}
                            >
                              <CardCustomContent
                                className={classNames(
                                  "__wab_instance",
                                  sty.cardCustomContent__bR4Wv
                                )}
                              >
                                <CardCustomSubContent
                                  className={classNames(
                                    "__wab_instance",
                                    sty.cardCustomSubContent___0SKqU
                                  )}
                                  description={
                                    "Get ready for the craziest round of mini golf you've ever played! Wind your way through a tantalising labyrinth inspired by your everyday everythings with a generous slathering of nostalgia." as const
                                  }
                                  title={"We do Parties and Functions" as const}
                                />
                              </CardCustomContent>
                            </CardCustom>
                          </p.Stack>
                        ) : null}
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel___4SYy,
                          {
                            [sty.tabPanelprops___4SYya6X62]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f8Jt,
                            {
                              [sty.textprops__f8Jta6X62]: hasVariant(
                                $state,
                                "props",
                                "props"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "props", "props")
                            ? "Tab 2's Panel Content"
                            : "Tab 2's Panel Content"}
                        </div>

                        {(
                          hasVariant($state, "props", "props") ? true : true
                        ) ? (
                          <ButtonPreview
                            data-plasmic-name={"buttonPreview"}
                            data-plasmic-override={overrides.buttonPreview}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonPreview,
                              {
                                [sty.buttonPreviewprops]: hasVariant(
                                  $state,
                                  "props",
                                  "props"
                                )
                              }
                            )}
                          />
                        ) : null}
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__nbq9C
                        )}
                      >
                        <ChakraDocs
                          data-plasmic-name={"chakraDocs"}
                          data-plasmic-override={overrides.chakraDocs}
                          className={classNames(
                            "__wab_instance",
                            sty.chakraDocs,
                            {
                              [sty.chakraDocstheming]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                          path={
                            hasVariant($state, "theming", "theming")
                              ? ("btn.negative" as const)
                              : ("btn.primary" as const)
                          }
                          set={"core/color" as const}
                          theme={
                            hasVariant($state, "theming", "theming")
                              ? ("dark" as const)
                              : ("dark" as const)
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__hI2Fh,
                            {
                              [sty.texttheming__hI2Fh69JlO]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "theming", "theming")
                            ? "Design Tokens..."
                            : "Tab 3's Panel Content"}
                        </div>
                      </TabPanel>
                    </TabPanels>
                  </Tabs>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vvxkH
                    )}
                  >
                    {
                      "Chakra  is used for both Design and Development\nDeveloper docs visit:  https://chakra-ui.com/docs/components/button \nDesign file visit: [FigmaLink to Button] \n"
                    }
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "subNav",
    "button2",
    "tabs",
    "tabList",
    "tabPanels",
    "image",
    "stack",
    "stack2",
    "header",
    "cardHeader",
    "cardBody",
    "iconButton",
    "cardFooter",
    "avatarGroup",
    "buttonPreview",
    "chakraDocs"
  ],
  nav: ["nav"],
  subNav: ["subNav"],
  button2: ["button2"],
  tabs: [
    "tabs",
    "tabList",
    "tabPanels",
    "image",
    "stack",
    "stack2",
    "header",
    "cardHeader",
    "cardBody",
    "iconButton",
    "cardFooter",
    "avatarGroup",
    "buttonPreview",
    "chakraDocs"
  ],
  tabList: ["tabList"],
  tabPanels: [
    "tabPanels",
    "image",
    "stack",
    "stack2",
    "header",
    "cardHeader",
    "cardBody",
    "iconButton",
    "cardFooter",
    "avatarGroup",
    "buttonPreview",
    "chakraDocs"
  ],
  image: ["image"],
  stack: ["stack", "stack2", "header"],
  stack2: ["stack2", "header"],
  header: ["header"],
  cardHeader: ["cardHeader"],
  cardBody: ["cardBody"],
  iconButton: ["iconButton"],
  cardFooter: ["cardFooter", "avatarGroup"],
  avatarGroup: ["avatarGroup"],
  buttonPreview: ["buttonPreview"],
  chakraDocs: ["chakraDocs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: typeof Nav;
  subNav: typeof SubNav;
  button2: typeof Button2;
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
  image: "div";
  stack: "div";
  stack2: "div";
  header: "div";
  cardHeader: typeof CardHeader;
  cardBody: typeof CardBody;
  iconButton: typeof IconButton;
  cardFooter: typeof CardFooter;
  avatarGroup: typeof AvatarGroup;
  buttonPreview: typeof ButtonPreview;
  chakraDocs: typeof ChakraDocs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCard__VariantsArgs;
    args?: PlasmicCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCard__ArgProps,
          internalVariantPropNames: PlasmicCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCard";
  } else {
    func.displayName = `PlasmicCard.${nodeName}`;
  }
  return func;
}

export const PlasmicCard = Object.assign(
  // Top-level PlasmicCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    subNav: makeNodeComponent("subNav"),
    button2: makeNodeComponent("button2"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),
    image: makeNodeComponent("image"),
    stack: makeNodeComponent("stack"),
    stack2: makeNodeComponent("stack2"),
    header: makeNodeComponent("header"),
    cardHeader: makeNodeComponent("cardHeader"),
    cardBody: makeNodeComponent("cardBody"),
    iconButton: makeNodeComponent("iconButton"),
    cardFooter: makeNodeComponent("cardFooter"),
    avatarGroup: makeNodeComponent("avatarGroup"),
    buttonPreview: makeNodeComponent("buttonPreview"),
    chakraDocs: makeNodeComponent("chakraDocs"),

    // Metadata about props expected for PlasmicCard
    internalVariantProps: PlasmicCard__VariantProps,
    internalArgProps: PlasmicCard__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCard;
/* prettier-ignore-end */
