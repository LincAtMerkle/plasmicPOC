// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: JmTdzP_aysv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: 29bXtXSfKv4wef/component
import SubNav from "../../SubNav"; // plasmic-import: Pyz-ejhh9PT-70/component
import Button2 from "../../Button2"; // plasmic-import: gqYGTpy-VKih-k/component
import { Heading } from "@chakra-ui/react"; // plasmic-import: LUZ-EadiFt-pKZ/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: v15y1zx5wjOie1/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: jM-c9S8dG8S0c4/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: FXQF_HUkAEK9Dn/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: _ZE645AF17I4h0/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: AB2xSLDEjMl_Kp/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: r6nlMZjR1r4zub/codeComponent
import { ChakraDocs } from "../../../styles/ChakraDocs"; // plasmic-import: wtErYCFh5X4hT/codeComponent
import { ButtonPreview } from "../../../styles/ButtonPreview"; // plasmic-import: PcwhN-FHyr0-AH/codeComponent

import { useScreenVariants as useScreenVariantssqj7Gi5LUgTnD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SQJ7GI5lUG-TnD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicFoundations.module.css"; // plasmic-import: JmTdzP_aysv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CHjFDXi0wrulJy/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: N2O1cciiO0c85w/icon

export type PlasmicFoundations__VariantMembers = {
  props: "props";
  theming: "theming";
};
export type PlasmicFoundations__VariantsArgs = {
  props?: SingleBooleanChoiceArg<"props">;
  theming?: SingleBooleanChoiceArg<"theming">;
};
type VariantPropType = keyof PlasmicFoundations__VariantsArgs;
export const PlasmicFoundations__VariantProps = new Array<VariantPropType>(
  "props",
  "theming"
);

export type PlasmicFoundations__ArgsType = {};
type ArgPropType = keyof PlasmicFoundations__ArgsType;
export const PlasmicFoundations__ArgProps = new Array<ArgPropType>();

export type PlasmicFoundations__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<typeof Nav>;
  subNav?: p.Flex<typeof SubNav>;
  button?: p.Flex<"button">;
  button2?: p.Flex<typeof Button2>;
  heading?: p.Flex<typeof Heading>;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
};

export interface DefaultFoundationsProps {}

function PlasmicFoundations__RenderFunc(props: {
  variants: PlasmicFoundations__VariantsArgs;
  args: PlasmicFoundations__ArgsType;
  overrides: PlasmicFoundations__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "props",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.props
      },
      {
        path: "theming",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.theming
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqj7Gi5LUgTnD()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootprops]: hasVariant($state, "props", "props"),
              [sty.roottheming]: hasVariant($state, "theming", "theming")
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__l6Kaa)}
          >
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames("__wab_instance", sty.nav)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bgpOd, {
                [sty.freeBoxprops__bgpODe8Xl9]: hasVariant(
                  $state,
                  "props",
                  "props"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5KLQl)}
              >
                <SubNav
                  data-plasmic-name={"subNav"}
                  data-plasmic-override={overrides.subNav}
                  className={classNames("__wab_instance", sty.subNav)}
                />

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qWDcu)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>

                    {true ? (
                      <Button2
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___4C9Ri
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__vLMzB
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gnSm7
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button2>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oo55W)}
                >
                  <Heading
                    data-plasmic-name={"heading"}
                    data-plasmic-override={overrides.heading}
                    className={classNames("__wab_instance", sty.heading)}
                    noOfLines={1 as const}
                    size={"xl" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hkORt
                      )}
                    >
                      {"Foundations"}
                    </div>
                  </Heading>

                  <Text
                    align={"left" as const}
                    casing={"capitalise" as const}
                    className={classNames("__wab_instance", sty.text___5Su6T, {
                      [sty.textprops___5Su6Te8Xl9]: hasVariant(
                        $state,
                        "props",
                        "props"
                      )
                    })}
                    decoration={"none" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__g7MOm,
                        {
                          [sty.textprops__g7MOme8Xl9]: hasVariant(
                            $state,
                            "props",
                            "props"
                          ),
                          [sty.texttheming__g7MOmXouBt]: hasVariant(
                            $state,
                            "theming",
                            "theming"
                          )
                        }
                      )}
                    >
                      {
                        "Component foundations for all UI values, based on Design Tokens."
                      }
                    </div>
                  </Text>

                  <Tabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    className={classNames("__wab_instance", sty.tabs, {
                      [sty.tabsprops]: hasVariant($state, "props", "props"),
                      [sty.tabstheming]: hasVariant(
                        $state,
                        "theming",
                        "theming"
                      )
                    })}
                    variant={"soft-rounded" as const}
                  >
                    <TabList
                      data-plasmic-name={"tabList"}
                      data-plasmic-override={overrides.tabList}
                      className={classNames("__wab_instance", sty.tabList, {
                        [sty.tabListprops]: hasVariant(
                          $state,
                          "props",
                          "props"
                        ),
                        [sty.tabListtheming]: hasVariant(
                          $state,
                          "theming",
                          "theming"
                        )
                      })}
                    >
                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__vrYll,
                          {
                            [sty.tabtheming__vrYllXouBt]: hasVariant(
                              $state,
                              "theming",
                              "theming"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aJcNk
                          )}
                        >
                          {"Color"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__w6Iva,
                          {
                            [sty.tabprops__w6IvAe8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dxRxJ
                          )}
                        >
                          {"Spacing"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames("__wab_instance", sty.tab__bOmBq)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5R6Ne
                          )}
                        >
                          {"Text"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__fnHmM,
                          {
                            [sty.tabprops__fnHmMe8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ba2Az
                          )}
                        >
                          {"Sizing"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__w5P6C,
                          {
                            [sty.tabprops__w5P6Ce8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ktZa6
                          )}
                        >
                          {"Opacity"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__m5MHv,
                          {
                            [sty.tabprops__m5MHVe8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xDyHz
                          )}
                        >
                          {"Box Shadow"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___4XeGl,
                          {
                            [sty.tabprops___4XeGle8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k10Iy
                          )}
                        >
                          {"Composition"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__dcf7I,
                          {
                            [sty.tabprops__dcf7Ie8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__g6WS
                          )}
                        >
                          {"Border"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__m1YdH,
                          {
                            [sty.tabprops__m1YdHe8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fSp7V
                          )}
                        >
                          {"Assets"}
                        </div>
                      </Tab>
                    </TabList>

                    <TabPanels
                      data-plasmic-name={"tabPanels"}
                      data-plasmic-override={overrides.tabPanels}
                      className={classNames("__wab_instance", sty.tabPanels)}
                    >
                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__sl1Eu
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__kJcZe
                          )}
                        >
                          {"Tab 1's Panel Content"}
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ewoNu
                          )}
                        >
                          <ChakraDocs
                            className={classNames(
                              "__wab_instance",
                              sty.chakraDocs__oQoc,
                              {
                                [sty.chakraDocstheming__oQocXouBt]: hasVariant(
                                  $state,
                                  "theming",
                                  "theming"
                                )
                              }
                            )}
                            path={
                              hasVariant($state, "theming", "theming")
                                ? ("btn.negative" as const)
                                : ("btn.primary" as const)
                            }
                            set={"core/color" as const}
                            theme={
                              hasVariant($state, "theming", "theming")
                                ? ("dark" as const)
                                : ("dark" as const)
                            }
                          />
                        </p.Stack>
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel___75Aa3,
                          {
                            [sty.tabPanelprops___75Aa3E8Xl9]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__h3XHj,
                            {
                              [sty.textprops__h3XHje8Xl9]: hasVariant(
                                $state,
                                "props",
                                "props"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "props", "props")
                            ? "Tab 2's Panel Content"
                            : "Tab 2's Panel Content"}
                        </div>

                        {(
                          hasVariant($state, "props", "props") ? true : true
                        ) ? (
                          <ButtonPreview
                            data-plasmic-name={"buttonPreview"}
                            data-plasmic-override={overrides.buttonPreview}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonPreview,
                              {
                                [sty.buttonPreviewprops]: hasVariant(
                                  $state,
                                  "props",
                                  "props"
                                )
                              }
                            )}
                          />
                        ) : null}
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__kzrR
                        )}
                      >
                        <ChakraDocs
                          className={classNames(
                            "__wab_instance",
                            sty.chakraDocs__yM39,
                            {
                              [sty.chakraDocstheming__yM39XouBt]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                          path={
                            hasVariant($state, "theming", "theming")
                              ? ("btn.negative" as const)
                              : ("btn.primary" as const)
                          }
                          set={"core/color" as const}
                          theme={
                            hasVariant($state, "theming", "theming")
                              ? ("dark" as const)
                              : ("dark" as const)
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wkNgH,
                            {
                              [sty.texttheming__wkNgHXouBt]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "theming", "theming")
                            ? "Design Tokens..."
                            : "Tab 3's Panel Content"}
                        </div>
                      </TabPanel>
                    </TabPanels>
                  </Tabs>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__f3De6
                    )}
                  >
                    {
                      "Chakra  is used for both Design and Development\nDeveloper docs visit:  https://chakra-ui.com/docs/components/button \nDesign file visit: [FigmaLink to Button] \n"
                    }
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "subNav",
    "button",
    "button2",
    "heading",
    "tabs",
    "tabList",
    "tabPanels",
    "buttonPreview"
  ],
  nav: ["nav"],
  subNav: ["subNav"],
  button: ["button"],
  button2: ["button2"],
  heading: ["heading"],
  tabs: ["tabs", "tabList", "tabPanels", "buttonPreview"],
  tabList: ["tabList"],
  tabPanels: ["tabPanels", "buttonPreview"],
  buttonPreview: ["buttonPreview"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: typeof Nav;
  subNav: typeof SubNav;
  button: "button";
  button2: typeof Button2;
  heading: typeof Heading;
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
  buttonPreview: typeof ButtonPreview;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFoundations__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFoundations__VariantsArgs;
    args?: PlasmicFoundations__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFoundations__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFoundations__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFoundations__ArgProps,
          internalVariantPropNames: PlasmicFoundations__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFoundations__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFoundations";
  } else {
    func.displayName = `PlasmicFoundations.${nodeName}`;
  }
  return func;
}

export const PlasmicFoundations = Object.assign(
  // Top-level PlasmicFoundations renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    subNav: makeNodeComponent("subNav"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    heading: makeNodeComponent("heading"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),
    buttonPreview: makeNodeComponent("buttonPreview"),

    // Metadata about props expected for PlasmicFoundations
    internalVariantProps: PlasmicFoundations__VariantProps,
    internalArgProps: PlasmicFoundations__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFoundations;
/* prettier-ignore-end */
