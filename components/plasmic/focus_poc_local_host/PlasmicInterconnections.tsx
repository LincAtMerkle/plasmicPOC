// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: _FJBp3Isjdw
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: 29bXtXSfKv4wef/component
import SubNav from "../../SubNav"; // plasmic-import: Pyz-ejhh9PT-70/component
import Button2 from "../../Button2"; // plasmic-import: gqYGTpy-VKih-k/component
import { Heading } from "@chakra-ui/react"; // plasmic-import: LUZ-EadiFt-pKZ/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: v15y1zx5wjOie1/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: jM-c9S8dG8S0c4/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: FXQF_HUkAEK9Dn/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: _ZE645AF17I4h0/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: AB2xSLDEjMl_Kp/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: r6nlMZjR1r4zub/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: 1zjFflbhvmK0o/codeComponent
import { CheckCircleIcon } from "@chakra-ui/react"; // plasmic-import: GSuP1QQXRL2iP/codeComponent
import { ButtonPreview } from "../../ButtonPreview"; // plasmic-import: PcwhN-FHyr0-AH/codeComponent
import { ChakraDocs } from "../../../styles/ChakraDocs"; // plasmic-import: wtErYCFh5X4hT/codeComponent

import { useScreenVariants as useScreenVariantssqj7Gi5LUgTnD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SQJ7GI5lUG-TnD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicInterconnections.module.css"; // plasmic-import: _FJBp3Isjdw/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CHjFDXi0wrulJy/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: N2O1cciiO0c85w/icon

export type PlasmicInterconnections__VariantMembers = {
  props: "props";
  theming: "theming";
};
export type PlasmicInterconnections__VariantsArgs = {
  props?: SingleBooleanChoiceArg<"props">;
  theming?: SingleBooleanChoiceArg<"theming">;
};
type VariantPropType = keyof PlasmicInterconnections__VariantsArgs;
export const PlasmicInterconnections__VariantProps = new Array<VariantPropType>(
  "props",
  "theming"
);

export type PlasmicInterconnections__ArgsType = {};
type ArgPropType = keyof PlasmicInterconnections__ArgsType;
export const PlasmicInterconnections__ArgProps = new Array<ArgPropType>();

export type PlasmicInterconnections__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<typeof Nav>;
  subNav?: p.Flex<typeof SubNav>;
  button2?: p.Flex<typeof Button2>;
  heading?: p.Flex<typeof Heading>;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
  chakraDocs?: p.Flex<typeof ChakraDocs>;
};

export interface DefaultInterconnectionsProps {}

function PlasmicInterconnections__RenderFunc(props: {
  variants: PlasmicInterconnections__VariantsArgs;
  args: PlasmicInterconnections__ArgsType;
  overrides: PlasmicInterconnections__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "props",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.props
      },
      {
        path: "theming",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.theming
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqj7Gi5LUgTnD()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootprops]: hasVariant($state, "props", "props"),
              [sty.roottheming]: hasVariant($state, "theming", "theming")
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__w57Gm)}
          >
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames("__wab_instance", sty.nav)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6WLsX, {
                [sty.freeBoxprops___6WLsXa2W0S]: hasVariant(
                  $state,
                  "props",
                  "props"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__fzVl2)}
              >
                <SubNav
                  data-plasmic-name={"subNav"}
                  data-plasmic-override={overrides.subNav}
                  className={classNames("__wab_instance", sty.subNav)}
                />

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__auPw)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__bsFcw
                      )}
                    >
                      {"Sign up"}
                    </button>

                    {true ? (
                      <Button2
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__gClgt
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__uZaTl
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aoY2U
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button2>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jFKc9)}
                >
                  <Heading
                    data-plasmic-name={"heading"}
                    data-plasmic-override={overrides.heading}
                    className={classNames("__wab_instance", sty.heading)}
                    noOfLines={1 as const}
                    size={"xl" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__amcI
                      )}
                    >
                      {"Interconnections"}
                    </div>
                  </Heading>

                  <Text
                    align={"left" as const}
                    casing={"capitalise" as const}
                    className={classNames("__wab_instance", sty.text__fYmX, {
                      [sty.textprops__fYmXa2W0S]: hasVariant(
                        $state,
                        "props",
                        "props"
                      )
                    })}
                    decoration={"none" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1WSxH,
                        {
                          [sty.textprops___1WSxHa2W0S]: hasVariant(
                            $state,
                            "props",
                            "props"
                          ),
                          [sty.texttheming___1WSxH58PCr]: hasVariant(
                            $state,
                            "theming",
                            "theming"
                          )
                        }
                      )}
                    >
                      {
                        "These is interconnected reasoning that was inspired by passed narrative and influenced current and  and future Narratives for each Brand. Shared patterns, templates, content, flows, themes... \n\nAnything that inspires or influences the Narrative for Product, it's innovation and siplicity."
                      }
                    </div>
                  </Text>

                  <Tabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    className={classNames("__wab_instance", sty.tabs, {
                      [sty.tabsprops]: hasVariant($state, "props", "props"),
                      [sty.tabstheming]: hasVariant(
                        $state,
                        "theming",
                        "theming"
                      )
                    })}
                    variant={"soft-rounded" as const}
                  >
                    <TabList
                      data-plasmic-name={"tabList"}
                      data-plasmic-override={overrides.tabList}
                      className={classNames("__wab_instance", sty.tabList, {
                        [sty.tabListprops]: hasVariant(
                          $state,
                          "props",
                          "props"
                        ),
                        [sty.tabListtheming]: hasVariant(
                          $state,
                          "theming",
                          "theming"
                        )
                      })}
                    >
                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__zyWkf,
                          {
                            [sty.tabtheming__zyWkf58PCr]: hasVariant(
                              $state,
                              "theming",
                              "theming"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___2AWwl
                          )}
                        >
                          {"Insight A "}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___2IbPx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jFIll
                          )}
                        >
                          {"Insight B"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab__nBcV2,
                          {
                            [sty.tabprops__nBcV2A2W0S]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yjtTp
                          )}
                        >
                          {"Insight C"}
                        </div>
                      </Tab>
                    </TabList>

                    <TabPanels
                      data-plasmic-name={"tabPanels"}
                      data-plasmic-override={overrides.tabPanels}
                      className={classNames("__wab_instance", sty.tabPanels)}
                    >
                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__rZdqM
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cSae0
                          )}
                        >
                          {"Tab 1's Panel Content"}
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__jhH3
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__dRxo3
                            )}
                            colorScheme={"red" as const}
                            isActive={false}
                            isDisabled={false}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__qV38F
                                )}
                              />
                            }
                            rightIcon={null}
                            variant={"solid" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Z0ET
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__aiAX
                            )}
                            iconSpacing={undefined}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__u0Stf
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__xo8DR
                                )}
                              />
                            }
                            size={"lg" as const}
                            variant={"secondary" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9M8Hk
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__sQs4E
                            )}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__hfClz
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__jcDmc
                                )}
                              />
                            }
                            variant={"negative" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5NQDb
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__pyDa9
                            )}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__fc0Yc
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__dHemt
                                )}
                              />
                            }
                            variant={"primary" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lVtx5
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>
                        </p.Stack>
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__m9OAp,
                          {
                            [sty.tabPanelprops__m9OAPa2W0S]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__t8Zpt,
                            {
                              [sty.textprops__t8Zpta2W0S]: hasVariant(
                                $state,
                                "props",
                                "props"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "props", "props")
                            ? "Tab 2's Panel Content"
                            : "Tab 2's Panel Content"}
                        </div>

                        {(
                          hasVariant($state, "props", "props") ? true : true
                        ) ? (
                          <ButtonPreview
                            data-plasmic-name={"buttonPreview"}
                            data-plasmic-override={overrides.buttonPreview}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonPreview,
                              {
                                [sty.buttonPreviewprops]: hasVariant(
                                  $state,
                                  "props",
                                  "props"
                                )
                              }
                            )}
                          />
                        ) : null}
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__gvSm
                        )}
                      >
                        <ChakraDocs
                          data-plasmic-name={"chakraDocs"}
                          data-plasmic-override={overrides.chakraDocs}
                          className={classNames(
                            "__wab_instance",
                            sty.chakraDocs,
                            {
                              [sty.chakraDocstheming]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                          path={
                            hasVariant($state, "theming", "theming")
                              ? ("btn.negative" as const)
                              : ("btn.primary" as const)
                          }
                          set={"core/color" as const}
                          theme={
                            hasVariant($state, "theming", "theming")
                              ? ("dark" as const)
                              : ("dark" as const)
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dPjSp,
                            {
                              [sty.texttheming__dPjSp58PCr]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "theming", "theming")
                            ? "Design Tokens..."
                            : "Tab 3's Panel Content"}
                        </div>
                      </TabPanel>
                    </TabPanels>
                  </Tabs>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u6QPy
                    )}
                  >
                    {
                      "Chakra  is used for both Design and Development\nDeveloper docs visit:  https://chakra-ui.com/docs/components/button \nDesign file visit: [FigmaLink to Button] \n"
                    }
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "subNav",
    "button2",
    "heading",
    "tabs",
    "tabList",
    "tabPanels",
    "buttonPreview",
    "chakraDocs"
  ],
  nav: ["nav"],
  subNav: ["subNav"],
  button2: ["button2"],
  heading: ["heading"],
  tabs: ["tabs", "tabList", "tabPanels", "buttonPreview", "chakraDocs"],
  tabList: ["tabList"],
  tabPanels: ["tabPanels", "buttonPreview", "chakraDocs"],
  buttonPreview: ["buttonPreview"],
  chakraDocs: ["chakraDocs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: typeof Nav;
  subNav: typeof SubNav;
  button2: typeof Button2;
  heading: typeof Heading;
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
  buttonPreview: typeof ButtonPreview;
  chakraDocs: typeof ChakraDocs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInterconnections__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInterconnections__VariantsArgs;
    args?: PlasmicInterconnections__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInterconnections__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInterconnections__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInterconnections__ArgProps,
          internalVariantPropNames: PlasmicInterconnections__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInterconnections__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInterconnections";
  } else {
    func.displayName = `PlasmicInterconnections.${nodeName}`;
  }
  return func;
}

export const PlasmicInterconnections = Object.assign(
  // Top-level PlasmicInterconnections renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    subNav: makeNodeComponent("subNav"),
    button2: makeNodeComponent("button2"),
    heading: makeNodeComponent("heading"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),
    buttonPreview: makeNodeComponent("buttonPreview"),
    chakraDocs: makeNodeComponent("chakraDocs"),

    // Metadata about props expected for PlasmicInterconnections
    internalVariantProps: PlasmicInterconnections__VariantProps,
    internalArgProps: PlasmicInterconnections__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInterconnections;
/* prettier-ignore-end */
