// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: yQIB8oOC4ZH-Ii
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Accordion } from "@chakra-ui/react"; // plasmic-import: n_6f0UndkjlyMH/codeComponent
import { AccordionItem } from "@chakra-ui/react"; // plasmic-import: jfdrnNhTvbX7CK/codeComponent
import { AccordionButton } from "@chakra-ui/react"; // plasmic-import: Fssg6YJPoRRVtj/codeComponent
import { AccordionIcon } from "@chakra-ui/react"; // plasmic-import: KkR2qBN8FvtRlw/codeComponent
import { AccordionPanel } from "@chakra-ui/react"; // plasmic-import: UPsG8LdEtbtV-Y/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: v15y1zx5wjOie1/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicAccordion.module.css"; // plasmic-import: yQIB8oOC4ZH-Ii/css

export type PlasmicAccordion__VariantMembers = {};
export type PlasmicAccordion__VariantsArgs = {};
type VariantPropType = keyof PlasmicAccordion__VariantsArgs;
export const PlasmicAccordion__VariantProps = new Array<VariantPropType>();

export type PlasmicAccordion__ArgsType = {};
type ArgPropType = keyof PlasmicAccordion__ArgsType;
export const PlasmicAccordion__ArgProps = new Array<ArgPropType>();

export type PlasmicAccordion__OverridesType = {
  root?: p.Flex<"div">;
  accordion?: p.Flex<typeof Accordion>;
};

export interface DefaultAccordionProps {}

function PlasmicAccordion__RenderFunc(props: {
  variants: PlasmicAccordion__VariantsArgs;
  args: PlasmicAccordion__ArgsType;
  overrides: PlasmicAccordion__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <Accordion
            data-plasmic-name={"accordion"}
            data-plasmic-override={overrides.accordion}
            className={classNames("__wab_instance", sty.accordion)}
          >
            <AccordionItem
              className={classNames("__wab_instance", sty.accordionItem__zvcIl)}
            >
              <AccordionButton
                className={classNames(
                  "__wab_instance",
                  sty.accordionButton__x7Jm
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__df6N4
                  )}
                >
                  {"Section 1 title"}
                </div>

                <AccordionIcon
                  className={classNames(
                    "__wab_instance",
                    sty.accordionIcon__xi5Z0
                  )}
                />
              </AccordionButton>

              <AccordionPanel
                className={classNames(
                  "__wab_instance",
                  sty.accordionPanel__efB1C
                )}
              >
                <Text
                  align={"left" as const}
                  casing={"lowercase" as const}
                  className={classNames("__wab_instance", sty.text__br0E3)}
                  decoration={"none" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oT2R1
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                    }
                  </div>
                </Text>
              </AccordionPanel>
            </AccordionItem>

            <AccordionItem
              className={classNames("__wab_instance", sty.accordionItem__olUj8)}
            >
              <AccordionButton
                className={classNames(
                  "__wab_instance",
                  sty.accordionButton__lyeXm
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ybpNb
                  )}
                >
                  {"Section 1 title"}
                </div>

                <AccordionIcon
                  className={classNames(
                    "__wab_instance",
                    sty.accordionIcon__pSaX6
                  )}
                />
              </AccordionButton>

              <AccordionPanel
                className={classNames(
                  "__wab_instance",
                  sty.accordionPanel__kjJ7Y
                )}
              >
                <Text
                  align={"left" as const}
                  casing={"lowercase" as const}
                  className={classNames("__wab_instance", sty.text__uRnTg)}
                  decoration={"none" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r65G
                    )}
                  >
                    {
                      "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                    }
                  </div>
                </Text>
              </AccordionPanel>
            </AccordionItem>
          </Accordion>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "accordion"],
  accordion: ["accordion"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  accordion: typeof Accordion;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAccordion__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAccordion__VariantsArgs;
    args?: PlasmicAccordion__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAccordion__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAccordion__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAccordion__ArgProps,
          internalVariantPropNames: PlasmicAccordion__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAccordion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAccordion";
  } else {
    func.displayName = `PlasmicAccordion.${nodeName}`;
  }
  return func;
}

export const PlasmicAccordion = Object.assign(
  // Top-level PlasmicAccordion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accordion: makeNodeComponent("accordion"),

    // Metadata about props expected for PlasmicAccordion
    internalVariantProps: PlasmicAccordion__VariantProps,
    internalArgProps: PlasmicAccordion__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAccordion;
/* prettier-ignore-end */
