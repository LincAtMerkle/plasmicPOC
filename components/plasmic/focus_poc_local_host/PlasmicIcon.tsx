// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b6nKE7i8gN5v6BLYoUcJjc
// Component: zYH_T2ZI3uO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Nav from "../../Nav"; // plasmic-import: 29bXtXSfKv4wef/component
import SubNav from "../../SubNav"; // plasmic-import: Pyz-ejhh9PT-70/component
import Button2 from "../../Button2"; // plasmic-import: gqYGTpy-VKih-k/component
import { Heading } from "@chakra-ui/react"; // plasmic-import: LUZ-EadiFt-pKZ/codeComponent
import { Text } from "@chakra-ui/react"; // plasmic-import: v15y1zx5wjOie1/codeComponent
import { Tabs } from "@chakra-ui/react"; // plasmic-import: jM-c9S8dG8S0c4/codeComponent
import { TabList } from "@chakra-ui/react"; // plasmic-import: FXQF_HUkAEK9Dn/codeComponent
import { Tab } from "@chakra-ui/react"; // plasmic-import: _ZE645AF17I4h0/codeComponent
import { TabPanels } from "@chakra-ui/react"; // plasmic-import: AB2xSLDEjMl_Kp/codeComponent
import { TabPanel } from "@chakra-ui/react"; // plasmic-import: r6nlMZjR1r4zub/codeComponent
import { Button } from "@chakra-ui/react"; // plasmic-import: 1zjFflbhvmK0o/codeComponent
import { CheckCircleIcon } from "@chakra-ui/react"; // plasmic-import: GSuP1QQXRL2iP/codeComponent
import { ButtonPreview } from "../../../styles/ButtonPreview"; // plasmic-import: PcwhN-FHyr0-AH/codeComponent
import { ChakraDocs } from "../../../styles/ChakraDocs"; // plasmic-import: wtErYCFh5X4hT/codeComponent

import { useScreenVariants as useScreenVariantssqj7Gi5LUgTnD } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: SQJ7GI5lUG-TnD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_focus_poc_local_host.module.css"; // plasmic-import: b6nKE7i8gN5v6BLYoUcJjc/projectcss
import sty from "./PlasmicIcon.module.css"; // plasmic-import: zYH_T2ZI3uO/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: CHjFDXi0wrulJy/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: N2O1cciiO0c85w/icon

export type PlasmicIcon__VariantMembers = {
  props: "props";
  theming: "theming";
};
export type PlasmicIcon__VariantsArgs = {
  props?: SingleBooleanChoiceArg<"props">;
  theming?: SingleBooleanChoiceArg<"theming">;
};
type VariantPropType = keyof PlasmicIcon__VariantsArgs;
export const PlasmicIcon__VariantProps = new Array<VariantPropType>(
  "props",
  "theming"
);

export type PlasmicIcon__ArgsType = {};
type ArgPropType = keyof PlasmicIcon__ArgsType;
export const PlasmicIcon__ArgProps = new Array<ArgPropType>();

export type PlasmicIcon__OverridesType = {
  root?: p.Flex<"div">;
  nav?: p.Flex<typeof Nav>;
  subNav?: p.Flex<typeof SubNav>;
  button2?: p.Flex<typeof Button2>;
  heading?: p.Flex<typeof Heading>;
  tabs?: p.Flex<typeof Tabs>;
  tabList?: p.Flex<typeof TabList>;
  tabPanels?: p.Flex<typeof TabPanels>;
  buttonPreview?: p.Flex<typeof ButtonPreview>;
  chakraDocs?: p.Flex<typeof ChakraDocs>;
};

export interface DefaultIconProps {}

function PlasmicIcon__RenderFunc(props: {
  variants: PlasmicIcon__VariantsArgs;
  args: PlasmicIcon__ArgsType;
  overrides: PlasmicIcon__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "props",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.props
      },
      {
        path: "theming",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.theming
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssqj7Gi5LUgTnD()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root,
            {
              [sty.rootprops]: hasVariant($state, "props", "props"),
              [sty.roottheming]: hasVariant($state, "theming", "theming")
            }
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___907Py)}
          >
            <Nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames("__wab_instance", sty.nav)}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bChx, {
                [sty.freeBoxprops__bChXkfjNw]: hasVariant(
                  $state,
                  "props",
                  "props"
                )
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gbVmU)}
              >
                <SubNav
                  data-plasmic-name={"subNav"}
                  data-plasmic-override={overrides.subNav}
                  className={classNames("__wab_instance", sty.subNav)}
                />

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ulUxC)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__baScX
                      )}
                    >
                      {"Sign up"}
                    </button>

                    {true ? (
                      <Button2
                        data-plasmic-name={"button2"}
                        data-plasmic-override={overrides.button2}
                        className={classNames("__wab_instance", sty.button2)}
                        color={"clear" as const}
                        endIcon={
                          <Icon38Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__qudGt
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <ChecksvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__bwfo4
                            )}
                            role={"img"}
                          />
                        }
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__pBZlK
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button2>
                    ) : null}
                  </div>
                ) : null}
              </p.Stack>

              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__y4XlV)}
                >
                  <Heading
                    data-plasmic-name={"heading"}
                    data-plasmic-override={overrides.heading}
                    className={classNames("__wab_instance", sty.heading)}
                    noOfLines={1 as const}
                    size={"xl" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r0KO
                      )}
                    >
                      {"icon"}
                    </div>
                  </Heading>

                  <Text
                    align={"left" as const}
                    casing={"capitalise" as const}
                    className={classNames("__wab_instance", sty.text___1IcD1, {
                      [sty.textprops___1IcD1KfjNw]: hasVariant(
                        $state,
                        "props",
                        "props"
                      )
                    })}
                    decoration={"none" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zhWme,
                        {
                          [sty.textprops__zhWmEkfjNw]: hasVariant(
                            $state,
                            "props",
                            "props"
                          ),
                          [sty.texttheming__zhWme6ZiBk]: hasVariant(
                            $state,
                            "theming",
                            "theming"
                          )
                        }
                      )}
                    >
                      {
                        "Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation."
                      }
                    </div>
                  </Text>

                  <Tabs
                    data-plasmic-name={"tabs"}
                    data-plasmic-override={overrides.tabs}
                    className={classNames("__wab_instance", sty.tabs, {
                      [sty.tabsprops]: hasVariant($state, "props", "props"),
                      [sty.tabstheming]: hasVariant(
                        $state,
                        "theming",
                        "theming"
                      )
                    })}
                    variant={"soft-rounded" as const}
                  >
                    <TabList
                      data-plasmic-name={"tabList"}
                      data-plasmic-override={overrides.tabList}
                      className={classNames("__wab_instance", sty.tabList, {
                        [sty.tabListprops]: hasVariant(
                          $state,
                          "props",
                          "props"
                        ),
                        [sty.tabListtheming]: hasVariant(
                          $state,
                          "theming",
                          "theming"
                        )
                      })}
                    >
                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___3RbX3,
                          {
                            [sty.tabtheming___3RbX36ZiBk]: hasVariant(
                              $state,
                              "theming",
                              "theming"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__aVmOq
                          )}
                        >
                          {"Usage"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___0Rpqx
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mUh1
                          )}
                        >
                          {"Props"}
                        </div>
                      </Tab>

                      <Tab
                        className={classNames(
                          "__wab_instance",
                          sty.tab___1Dymm,
                          {
                            [sty.tabprops___1DymmkfjNw]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__giTq
                          )}
                        >
                          {"Theming"}
                        </div>
                      </Tab>
                    </TabList>

                    <TabPanels
                      data-plasmic-name={"tabPanels"}
                      data-plasmic-override={overrides.tabPanels}
                      className={classNames("__wab_instance", sty.tabPanels)}
                    >
                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__wozbY
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__k2Em
                          )}
                        >
                          {"Tab 1's Panel Content"}
                        </div>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__k6Peu
                          )}
                        >
                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__gGlao
                            )}
                            colorScheme={"red" as const}
                            isActive={false}
                            isDisabled={false}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon___1Fo2I
                                )}
                              />
                            }
                            rightIcon={null}
                            variant={"solid" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__o4Equ
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__kEuxA
                            )}
                            iconSpacing={undefined}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__xiXq8
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__uKTi
                                )}
                              />
                            }
                            size={"lg" as const}
                            variant={"secondary" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___5W3Xg
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__fwyk8
                            )}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__syZi0
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__ruE8M
                                )}
                              />
                            }
                            variant={"negative" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__izggx
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__n5Gq9
                            )}
                            leftIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__aOeoz
                                )}
                              />
                            }
                            rightIcon={
                              <CheckCircleIcon
                                className={classNames(
                                  "__wab_instance",
                                  sty.checkCircleIcon__x5OA
                                )}
                              />
                            }
                            variant={"primary" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9JfZb
                              )}
                            >
                              {"Button"}
                            </div>
                          </Button>
                        </p.Stack>
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__aO8Xm,
                          {
                            [sty.tabPanelprops__aO8XmkfjNw]: hasVariant(
                              $state,
                              "props",
                              "props"
                            )
                          }
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bn9Vv,
                            {
                              [sty.textprops__bn9VVkfjNw]: hasVariant(
                                $state,
                                "props",
                                "props"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "props", "props")
                            ? "Tab 2's Panel Content"
                            : "Tab 2's Panel Content"}
                        </div>

                        {(
                          hasVariant($state, "props", "props") ? true : true
                        ) ? (
                          <ButtonPreview
                            data-plasmic-name={"buttonPreview"}
                            data-plasmic-override={overrides.buttonPreview}
                            className={classNames(
                              "__wab_instance",
                              sty.buttonPreview,
                              {
                                [sty.buttonPreviewprops]: hasVariant(
                                  $state,
                                  "props",
                                  "props"
                                )
                              }
                            )}
                          />
                        ) : null}
                      </TabPanel>

                      <TabPanel
                        className={classNames(
                          "__wab_instance",
                          sty.tabPanel__gxfZh
                        )}
                      >
                        <ChakraDocs
                          data-plasmic-name={"chakraDocs"}
                          data-plasmic-override={overrides.chakraDocs}
                          className={classNames(
                            "__wab_instance",
                            sty.chakraDocs,
                            {
                              [sty.chakraDocstheming]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                          path={
                            hasVariant($state, "theming", "theming")
                              ? ("btn.negative" as const)
                              : ("btn.primary" as const)
                          }
                          set={"core/color" as const}
                          theme={
                            hasVariant($state, "theming", "theming")
                              ? ("dark" as const)
                              : ("dark" as const)
                          }
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__gZfx6,
                            {
                              [sty.texttheming__gZfx66ZiBk]: hasVariant(
                                $state,
                                "theming",
                                "theming"
                              )
                            }
                          )}
                        >
                          {hasVariant($state, "theming", "theming")
                            ? "Design Tokens..."
                            : "Tab 3's Panel Content"}
                        </div>
                      </TabPanel>
                    </TabPanels>
                  </Tabs>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fTgQq
                    )}
                  >
                    {
                      "Chakra  is used for both Design and Development\nDeveloper docs visit:  https://chakra-ui.com/docs/components/button \nDesign file visit: [FigmaLink to Button] \n"
                    }
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "nav",
    "subNav",
    "button2",
    "heading",
    "tabs",
    "tabList",
    "tabPanels",
    "buttonPreview",
    "chakraDocs"
  ],
  nav: ["nav"],
  subNav: ["subNav"],
  button2: ["button2"],
  heading: ["heading"],
  tabs: ["tabs", "tabList", "tabPanels", "buttonPreview", "chakraDocs"],
  tabList: ["tabList"],
  tabPanels: ["tabPanels", "buttonPreview", "chakraDocs"],
  buttonPreview: ["buttonPreview"],
  chakraDocs: ["chakraDocs"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  nav: typeof Nav;
  subNav: typeof SubNav;
  button2: typeof Button2;
  heading: typeof Heading;
  tabs: typeof Tabs;
  tabList: typeof TabList;
  tabPanels: typeof TabPanels;
  buttonPreview: typeof ButtonPreview;
  chakraDocs: typeof ChakraDocs;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIcon__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIcon__VariantsArgs;
    args?: PlasmicIcon__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIcon__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIcon__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIcon__ArgProps,
          internalVariantPropNames: PlasmicIcon__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicIcon__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIcon";
  } else {
    func.displayName = `PlasmicIcon.${nodeName}`;
  }
  return func;
}

export const PlasmicIcon = Object.assign(
  // Top-level PlasmicIcon renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    nav: makeNodeComponent("nav"),
    subNav: makeNodeComponent("subNav"),
    button2: makeNodeComponent("button2"),
    heading: makeNodeComponent("heading"),
    tabs: makeNodeComponent("tabs"),
    tabList: makeNodeComponent("tabList"),
    tabPanels: makeNodeComponent("tabPanels"),
    buttonPreview: makeNodeComponent("buttonPreview"),
    chakraDocs: makeNodeComponent("chakraDocs"),

    // Metadata about props expected for PlasmicIcon
    internalVariantProps: PlasmicIcon__VariantProps,
    internalArgProps: PlasmicIcon__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicIcon;
/* prettier-ignore-end */
